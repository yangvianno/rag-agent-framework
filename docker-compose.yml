# docker-compose.yml

services:
  # --- Service #1: The Qdrant Vector Database Service ---
  qdrant:
    platform: linux/amd64 # Specify platform for compatibility
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333" # REST API
      - "6334:6334" # gRPC
    volumes:
      - qdrant_storage:/qdrant/storage # Persistent storage for Qdrant data
    container_name: qdrant_db
    networks:
      - agent_network
    healthcheck:
      test: ["CMD-SHELL", "bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # --- Service #2: The Neo4j Graph Database Service ---
  neo4j:
    platform: linux/amd64
    image: neo4j:5 # sticks with a version 5
    ports:
      - "7474:7474" # HTTP Browser Interface
      - "7687:7687" # Bolt Protocol for driver connection
    volumes:
      - neo4j_data:/data
    user: "7474:7474"
    environment:
      # ---Placeholder---This disables the need for a password on first launch for local dev. For production, must set a password here!
      - NEO4J_AUTH=none
    container_name: neo4j_db
    networks:
      - agent_network
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # --- Service #3: The Ollama LLM Service ---
  ollama:
    build:
      context: .
      dockerfile: ollama.Dockerfile
    init: true # Ensure proper process supervision for Ollama
    ports:
      - "11434:11434" # Ollama API port
    volumes:
      - ollama_storage:/root/.ollama # Persistent storage for Ollama models
    container_name: ollama_service
    networks:
      - agent_network
    healthcheck:
      # Check if Ollama is running and the specific embedding model is pulled
      test: ["CMD-SHELL", "ollama list | grep -q 'nomic-embed-text'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 300s # Allow extra time for model download

  # --- Service #4: The Python Application (FastAPI) Service ---
  api:
    platform: linux/amd64 # Specify platform for compatibility
    build:
      context: . # Build using the Dockerfile in the current directory (project root)
      dockerfile: Dockerfile
    ports:
      - "8000:8000" # FastAPI application port
    env_file:
      - .env # Load environment variables from the local .env file
    depends_on:
      qdrant:
        condition: service_healthy # Ensure Qdrant is healthy before starting API
      neo4j:
        condition: service_healthy
      # ollama:
      #   condition: service_healthy # Ensure Ollama is healthy before starting API
    container_name: rag_api_service
    networks:
      - agent_network
    environment:
      # Override URLs for inter-service communication within the Docker network
      - QDRANT_URL=http://qdrant:6333
      - NEO4J_URI=bolt://neo4j:7687
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"] # Health check for FastAPI
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./config:/app/config

# --- Top-Level Definitions ---
networks:
  agent_network:
    driver: bridge # Define a shared bridge network for services

volumes:
  qdrant_storage: # Named volume for Qdrant persistence
  ollama_storage:
  neo4j_data: